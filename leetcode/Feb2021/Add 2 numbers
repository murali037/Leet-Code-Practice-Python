# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        
        c=0 #carry
        s=0 #sub sum
        
        dummy = ListNode()
        #pointer to the current node. 
        curr = dummy  #always use pointer to update linked list
        
        while l1 or l2 or c:
            s=c
            if l1:
                s += l1.val
                l1 = l1.next
            if l2:
                s += l2.val
                l2 = l2.next
                
            c = s // 10
            s = s % 10
            
            curr.next = ListNode(s)
            curr = curr.next
        print(dummy)
        return dummy.next





******************** optimized - keep connectng linked lists to the op_list at each iteration *********************

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        
        op_list = ListNode()
        ptr = op_list
        
        while l1 and l2:
            
            if l1.val <= l2.val:
                ptr.next = l1
                l1 = l1.next
            else:
                ptr.next = l2
                l2 = l2.next
            ptr = ptr.next
           
        ptr.next = l1 or l2
        return op_list.next
